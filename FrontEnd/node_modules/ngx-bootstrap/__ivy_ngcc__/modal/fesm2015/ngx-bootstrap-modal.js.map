{"version":3,"sources":["C:/TCC/master/sgambiental/FrontEnd/node_modules/ngx-bootstrap/modal/fesm2015/ngx-bootstrap-modal.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AASA;;;;;;;;;;;;;CAWC;;;gDAGC;;;;;;;;;;;;;;;;;;;;;;;CAqBD;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0ID,4BAkBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsED,oQAOC;;;;;;;;;;;;;uGAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyaD,2JAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+PD,yGAGC;;;;;;;;0HAKA;;;;;;;;;;;;;;;;;;CAgBD;;;;;;;;;;;;;;;;0BAWC","file":"ngx-bootstrap-modal.js","sourcesContent":["import { Injectable, Component, ElementRef, Renderer2, HostListener, EventEmitter, Directive, ViewContainerRef, Input, Output, RendererFactory2, NgModule } from '@angular/core';\nimport { isBs3, Utils, document as document$1, window as window$1 } from 'ngx-bootstrap/utils';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsModalRef {\n    constructor() {\n        /**\n         * Hides the modal\n         */\n        this.hide = Function;\n        /**\n         * Sets new class to modal window\n         */\n        this.setClass = Function;\n    }\n}\nBsModalRef.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ModalBackdropOptions {\n    /**\n     * @param {?} options\n     */\n    constructor(options) {\n        this.animate = true;\n        Object.assign(this, options);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ModalOptions {\n}\nModalOptions.decorators = [\n    { type: Injectable }\n];\n/** @type {?} */\nconst modalConfigDefaults = {\n    backdrop: true,\n    keyboard: true,\n    focus: true,\n    show: false,\n    ignoreBackdropClick: false,\n    class: '',\n    animated: true,\n    initialState: {}\n};\n/** @type {?} */\nconst CLASS_NAME = {\n    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',\n    BACKDROP: 'modal-backdrop',\n    OPEN: 'modal-open',\n    FADE: 'fade',\n    IN: 'in',\n    // bs3\n    SHOW: 'show' // bs4\n};\n/** @type {?} */\nconst TRANSITION_DURATIONS = {\n    MODAL: 300,\n    BACKDROP: 150\n};\n/** @type {?} */\nconst DISMISS_REASONS = {\n    BACKRDOP: 'backdrop-click',\n    ESC: 'esc'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ModalContainerComponent {\n    /**\n     * @param {?} options\n     * @param {?} _element\n     * @param {?} _renderer\n     */\n    constructor(options, _element, _renderer) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this.isShown = false;\n        this.isModalHiding = false;\n        this.config = Object.assign({}, options);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.isAnimated) {\n            this._renderer.addClass(this._element.nativeElement, CLASS_NAME.FADE);\n        }\n        this._renderer.setStyle(this._element.nativeElement, 'display', 'block');\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.isShown = true;\n            this._renderer.addClass(this._element.nativeElement, isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW);\n        }), this.isAnimated ? TRANSITION_DURATIONS.BACKDROP : 0);\n        if (document && document.body) {\n            if (this.bsModalService.getModalsCount() === 1) {\n                this.bsModalService.checkScrollbar();\n                this.bsModalService.setScrollbar();\n            }\n            this._renderer.addClass(document.body, CLASS_NAME.OPEN);\n        }\n        if (this._element.nativeElement) {\n            this._element.nativeElement.focus();\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onClick(event) {\n        if (this.config.ignoreBackdropClick ||\n            this.config.backdrop === 'static' ||\n            event.target !== this._element.nativeElement) {\n            return;\n        }\n        this.bsModalService.setDismissReason(DISMISS_REASONS.BACKRDOP);\n        this.hide();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onEsc(event) {\n        if (!this.isShown) {\n            return;\n        }\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === 27 || event.key === 'Escape') {\n            event.preventDefault();\n        }\n        if (this.config.keyboard &&\n            this.level === this.bsModalService.getModalsCount()) {\n            this.bsModalService.setDismissReason(DISMISS_REASONS.ESC);\n            this.hide();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.isShown) {\n            this.hide();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    hide() {\n        if (this.isModalHiding || !this.isShown) {\n            return;\n        }\n        this.isModalHiding = true;\n        this._renderer.removeClass(this._element.nativeElement, isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW);\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.isShown = false;\n            if (document &&\n                document.body &&\n                this.bsModalService.getModalsCount() === 1) {\n                this._renderer.removeClass(document.body, CLASS_NAME.OPEN);\n            }\n            this.bsModalService.hide(this.level);\n            this.isModalHiding = false;\n        }), this.isAnimated ? TRANSITION_DURATIONS.MODAL : 0);\n    }\n}\nModalContainerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'modal-container',\n                template: `\n    <div [class]=\"'modal-dialog' + (config.class ? ' ' + config.class : '')\" role=\"document\">\n      <div class=\"modal-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n                host: {\n                    class: 'modal',\n                    role: 'dialog',\n                    tabindex: '-1',\n                    '[attr.aria-modal]': 'true'\n                }\n            }] }\n];\n/** @nocollapse */\nModalContainerComponent.ctorParameters = () => [\n    { type: ModalOptions },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nModalContainerComponent.propDecorators = {\n    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This component will be added as background layout for modals if enabled\n */\nclass ModalBackdropComponent {\n    /**\n     * @param {?} element\n     * @param {?} renderer\n     */\n    constructor(element, renderer) {\n        this._isShown = false;\n        this.element = element;\n        this.renderer = renderer;\n    }\n    /**\n     * @return {?}\n     */\n    get isAnimated() {\n        return this._isAnimated;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isAnimated(value) {\n        this._isAnimated = value;\n        // this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);\n    }\n    /**\n     * @return {?}\n     */\n    get isShown() {\n        return this._isShown;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set isShown(value) {\n        this._isShown = value;\n        if (value) {\n            this.renderer.addClass(this.element.nativeElement, `${CLASS_NAME.IN}`);\n        }\n        else {\n            this.renderer.removeClass(this.element.nativeElement, `${CLASS_NAME.IN}`);\n        }\n        if (!isBs3()) {\n            if (value) {\n                this.renderer.addClass(this.element.nativeElement, `${CLASS_NAME.SHOW}`);\n            }\n            else {\n                this.renderer.removeClass(this.element.nativeElement, `${CLASS_NAME.SHOW}`);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.isAnimated) {\n            this.renderer.addClass(this.element.nativeElement, `${CLASS_NAME.FADE}`);\n            Utils.reflow(this.element.nativeElement);\n        }\n        this.isShown = true;\n    }\n}\nModalBackdropComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'bs-modal-backdrop',\n                template: ' ',\n                host: { class: CLASS_NAME.BACKDROP }\n            }] }\n];\n/** @nocollapse */\nModalBackdropComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst TRANSITION_DURATION = 300;\n/** @type {?} */\nconst BACKDROP_TRANSITION_DURATION = 150;\n/**\n * Mark any code with directive to show it's content in modal\n */\nclass ModalDirective {\n    /**\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} _renderer\n     * @param {?} clf\n     */\n    constructor(_element, _viewContainerRef, _renderer, clf) {\n        this._element = _element;\n        this._renderer = _renderer;\n        /**\n         * This event fires immediately when the `show` instance method is called.\n         */\n        this.onShow = new EventEmitter();\n        /**\n         * This event is fired when the modal has been made visible to the user\n         * (will wait for CSS transitions to complete)\n         */\n        this.onShown = new EventEmitter();\n        /**\n         * This event is fired immediately when\n         * the hide instance method has been called.\n         */\n        this.onHide = new EventEmitter();\n        /**\n         * This event is fired when the modal has finished being\n         * hidden from the user (will wait for CSS transitions to complete).\n         */\n        this.onHidden = new EventEmitter();\n        this._isShown = false;\n        this.isBodyOverflowing = false;\n        this.originalBodyPadding = 0;\n        this.scrollbarWidth = 0;\n        this.timerHideModal = 0;\n        this.timerRmBackDrop = 0;\n        this.isNested = false;\n        this._backdrop = clf.createLoader(_element, _viewContainerRef, _renderer);\n    }\n    /**\n     * allows to set modal configuration via element property\n     * @param {?} conf\n     * @return {?}\n     */\n    set config(conf) {\n        this._config = this.getConfig(conf);\n    }\n    /**\n     * @return {?}\n     */\n    get config() {\n        return this._config;\n    }\n    /**\n     * @return {?}\n     */\n    get isShown() {\n        return this._isShown;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onClick(event) {\n        if (this.config.ignoreBackdropClick ||\n            this.config.backdrop === 'static' ||\n            event.target !== this._element.nativeElement) {\n            return;\n        }\n        this.dismissReason = DISMISS_REASONS.BACKRDOP;\n        this.hide(event);\n    }\n    // todo: consider preventing default and stopping propagation\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onEsc(event) {\n        if (!this._isShown) {\n            return;\n        }\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === 27 || event.key === 'Escape') {\n            event.preventDefault();\n        }\n        if (this.config.keyboard) {\n            this.dismissReason = DISMISS_REASONS.ESC;\n            this.hide();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.config = void 0;\n        if (this._isShown) {\n            this._isShown = false;\n            this.hideModal();\n            this._backdrop.dispose();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._config = this._config || this.getConfig();\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            if (this._config.show) {\n                this.show();\n            }\n        }), 0);\n    }\n    /* Public methods */\n    /**\n     * Allows to manually toggle modal visibility\n     * @return {?}\n     */\n    toggle() {\n        return this._isShown ? this.hide() : this.show();\n    }\n    /**\n     * Allows to manually open modal\n     * @return {?}\n     */\n    show() {\n        this.dismissReason = null;\n        this.onShow.emit(this);\n        if (this._isShown) {\n            return;\n        }\n        clearTimeout(this.timerHideModal);\n        clearTimeout(this.timerRmBackDrop);\n        this._isShown = true;\n        this.checkScrollbar();\n        this.setScrollbar();\n        if (document$1 && document$1.body) {\n            if (document$1.body.classList.contains(CLASS_NAME.OPEN)) {\n                this.isNested = true;\n            }\n            else {\n                this._renderer.addClass(document$1.body, CLASS_NAME.OPEN);\n            }\n        }\n        this.showBackdrop((/**\n         * @return {?}\n         */\n        () => {\n            this.showElement();\n        }));\n    }\n    /**\n     * Allows to manually close modal\n     * @param {?=} event\n     * @return {?}\n     */\n    hide(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        this.onHide.emit(this);\n        // todo: add an option to prevent hiding\n        if (!this._isShown) {\n            return;\n        }\n        window$1.clearTimeout(this.timerHideModal);\n        window$1.clearTimeout(this.timerRmBackDrop);\n        this._isShown = false;\n        this._renderer.removeClass(this._element.nativeElement, CLASS_NAME.IN);\n        if (!isBs3()) {\n            this._renderer.removeClass(this._element.nativeElement, CLASS_NAME.SHOW);\n        }\n        // this._addClassIn = false;\n        if (this._config.animated) {\n            this.timerHideModal = window$1.setTimeout((/**\n             * @return {?}\n             */\n            () => this.hideModal()), TRANSITION_DURATION);\n        }\n        else {\n            this.hideModal();\n        }\n    }\n    /**\n     * Private methods \\@internal\n     * @protected\n     * @param {?=} config\n     * @return {?}\n     */\n    getConfig(config) {\n        return Object.assign({}, modalConfigDefaults, config);\n    }\n    /**\n     *  Show dialog\n     * \\@internal\n     * @protected\n     * @return {?}\n     */\n    showElement() {\n        // todo: replace this with component loader usage\n        if (!this._element.nativeElement.parentNode ||\n            this._element.nativeElement.parentNode.nodeType !== Node.ELEMENT_NODE) {\n            // don't move modals dom position\n            if (document$1 && document$1.body) {\n                document$1.body.appendChild(this._element.nativeElement);\n            }\n        }\n        this._renderer.setAttribute(this._element.nativeElement, 'aria-hidden', 'false');\n        this._renderer.setAttribute(this._element.nativeElement, 'aria-modal', 'true');\n        this._renderer.setStyle(this._element.nativeElement, 'display', 'block');\n        this._renderer.setProperty(this._element.nativeElement, 'scrollTop', 0);\n        if (this._config.animated) {\n            Utils.reflow(this._element.nativeElement);\n        }\n        // this._addClassIn = true;\n        this._renderer.addClass(this._element.nativeElement, CLASS_NAME.IN);\n        if (!isBs3()) {\n            this._renderer.addClass(this._element.nativeElement, CLASS_NAME.SHOW);\n        }\n        /** @type {?} */\n        const transitionComplete = (/**\n         * @return {?}\n         */\n        () => {\n            if (this._config.focus) {\n                this._element.nativeElement.focus();\n            }\n            this.onShown.emit(this);\n        });\n        if (this._config.animated) {\n            setTimeout(transitionComplete, TRANSITION_DURATION);\n        }\n        else {\n            transitionComplete();\n        }\n    }\n    /**\n     * \\@internal\n     * @protected\n     * @return {?}\n     */\n    hideModal() {\n        this._renderer.setAttribute(this._element.nativeElement, 'aria-hidden', 'true');\n        this._renderer.setStyle(this._element.nativeElement, 'display', 'none');\n        this.showBackdrop((/**\n         * @return {?}\n         */\n        () => {\n            if (!this.isNested) {\n                if (document$1 && document$1.body) {\n                    this._renderer.removeClass(document$1.body, CLASS_NAME.OPEN);\n                }\n                this.resetScrollbar();\n            }\n            this.resetAdjustments();\n            this.focusOtherModal();\n            this.onHidden.emit(this);\n        }));\n    }\n    // todo: original show was calling a callback when done, but we can use\n    // promise\n    /**\n     * \\@internal\n     * @protected\n     * @param {?=} callback\n     * @return {?}\n     */\n    showBackdrop(callback) {\n        if (this._isShown &&\n            this.config.backdrop &&\n            (!this.backdrop || !this.backdrop.instance.isShown)) {\n            this.removeBackdrop();\n            this._backdrop\n                .attach(ModalBackdropComponent)\n                .to('body')\n                .show({ isAnimated: this._config.animated });\n            this.backdrop = this._backdrop._componentRef;\n            if (!callback) {\n                return;\n            }\n            if (!this._config.animated) {\n                callback();\n                return;\n            }\n            setTimeout(callback, BACKDROP_TRANSITION_DURATION);\n        }\n        else if (!this._isShown && this.backdrop) {\n            this.backdrop.instance.isShown = false;\n            /** @type {?} */\n            const callbackRemove = (/**\n             * @return {?}\n             */\n            () => {\n                this.removeBackdrop();\n                if (callback) {\n                    callback();\n                }\n            });\n            if (this.backdrop.instance.isAnimated) {\n                this.timerRmBackDrop = window$1.setTimeout(callbackRemove, BACKDROP_TRANSITION_DURATION);\n            }\n            else {\n                callbackRemove();\n            }\n        }\n        else if (callback) {\n            callback();\n        }\n    }\n    /**\n     * \\@internal\n     * @protected\n     * @return {?}\n     */\n    removeBackdrop() {\n        this._backdrop.hide();\n    }\n    /**\n     * Events tricks\n     * @protected\n     * @return {?}\n     */\n    // no need for it\n    // protected setEscapeEvent():void {\n    //   if (this._isShown && this._config.keyboard) {\n    //     $(this._element).on(Event.KEYDOWN_DISMISS, (event) => {\n    //       if (event.which === 27) {\n    //         this.hide()\n    //       }\n    //     })\n    //\n    //   } else if (!this._isShown) {\n    //     $(this._element).off(Event.KEYDOWN_DISMISS)\n    //   }\n    // }\n    // protected setResizeEvent():void {\n    // console.log(this.renderer.listenGlobal('', Event.RESIZE));\n    // if (this._isShown) {\n    //   $(window).on(Event.RESIZE, $.proxy(this._handleUpdate, this))\n    // } else {\n    //   $(window).off(Event.RESIZE)\n    // }\n    // }\n    focusOtherModal() {\n        if (this._element.nativeElement.parentElement == null) {\n            return;\n        }\n        /** @type {?} */\n        const otherOpenedModals = this._element.nativeElement.parentElement.querySelectorAll('.in[bsModal]');\n        if (!otherOpenedModals.length) {\n            return;\n        }\n        otherOpenedModals[otherOpenedModals.length - 1].focus();\n    }\n    /**\n     * \\@internal\n     * @protected\n     * @return {?}\n     */\n    resetAdjustments() {\n        this._renderer.setStyle(this._element.nativeElement, 'paddingLeft', '');\n        this._renderer.setStyle(this._element.nativeElement, 'paddingRight', '');\n    }\n    /** Scroll bar tricks */\n    /**\n     * \\@internal\n     * @protected\n     * @return {?}\n     */\n    checkScrollbar() {\n        this.isBodyOverflowing = document$1.body.clientWidth < window$1.innerWidth;\n        this.scrollbarWidth = this.getScrollbarWidth();\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    setScrollbar() {\n        if (!document$1) {\n            return;\n        }\n        this.originalBodyPadding = parseInt(window$1\n            .getComputedStyle(document$1.body)\n            .getPropertyValue('padding-right') || 0, 10);\n        if (this.isBodyOverflowing) {\n            document$1.body.style.paddingRight = `${this.originalBodyPadding +\n                this.scrollbarWidth}px`;\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    resetScrollbar() {\n        document$1.body.style.paddingRight = `${this.originalBodyPadding}px`;\n    }\n    // thx d.walsh\n    /**\n     * @protected\n     * @return {?}\n     */\n    getScrollbarWidth() {\n        /** @type {?} */\n        const scrollDiv = this._renderer.createElement('div');\n        this._renderer.addClass(scrollDiv, CLASS_NAME.SCROLLBAR_MEASURER);\n        this._renderer.appendChild(document$1.body, scrollDiv);\n        /** @type {?} */\n        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        this._renderer.removeChild(document$1.body, scrollDiv);\n        return scrollbarWidth;\n    }\n}\nModalDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[bsModal]',\n                exportAs: 'bs-modal'\n            },] }\n];\n/** @nocollapse */\nModalDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ViewContainerRef },\n    { type: Renderer2 },\n    { type: ComponentLoaderFactory }\n];\nModalDirective.propDecorators = {\n    config: [{ type: Input }],\n    onShow: [{ type: Output }],\n    onShown: [{ type: Output }],\n    onHide: [{ type: Output }],\n    onHidden: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onEsc: [{ type: HostListener, args: ['keydown.esc', ['$event'],] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BsModalService {\n    /**\n     * @param {?} rendererFactory\n     * @param {?} clf\n     */\n    constructor(rendererFactory, clf) {\n        this.clf = clf;\n        // constructor props\n        this.config = modalConfigDefaults;\n        // tslint:disable-next-line:no-any\n        this.onShow = new EventEmitter();\n        // tslint:disable-next-line:no-any\n        this.onShown = new EventEmitter();\n        // tslint:disable-next-line:no-any\n        this.onHide = new EventEmitter();\n        // tslint:disable-next-line:no-any\n        this.onHidden = new EventEmitter();\n        this.isBodyOverflowing = false;\n        this.originalBodyPadding = 0;\n        this.scrollbarWidth = 0;\n        this.modalsCount = 0;\n        this.lastDismissReason = '';\n        this.loaders = [];\n        this._backdropLoader = this.clf.createLoader(null, null, null);\n        this._renderer = rendererFactory.createRenderer(null, null);\n    }\n    /**\n     * Shows a modal\n     * @param {?} content\n     * @param {?=} config\n     * @return {?}\n     */\n    // tslint:disable-next-line:no-any\n    show(content, config) {\n        this.modalsCount++;\n        this._createLoaders();\n        this.config = Object.assign({}, modalConfigDefaults, config);\n        this._showBackdrop();\n        this.lastDismissReason = null;\n        return this._showModal(content);\n    }\n    /**\n     * @param {?} level\n     * @return {?}\n     */\n    hide(level) {\n        if (this.modalsCount === 1) {\n            this._hideBackdrop();\n            this.resetScrollbar();\n        }\n        this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._hideModal(level);\n            this.removeLoaders(level);\n        }), this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0);\n    }\n    /**\n     * @return {?}\n     */\n    _showBackdrop() {\n        /** @type {?} */\n        const isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';\n        /** @type {?} */\n        const isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;\n        if (this.modalsCount === 1) {\n            this.removeBackdrop();\n            if (isBackdropEnabled && isBackdropInDOM) {\n                this._backdropLoader\n                    .attach(ModalBackdropComponent)\n                    .to('body')\n                    .show({ isAnimated: this.config.animated });\n                this.backdropRef = this._backdropLoader._componentRef;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _hideBackdrop() {\n        if (!this.backdropRef) {\n            return;\n        }\n        this.backdropRef.instance.isShown = false;\n        /** @type {?} */\n        const duration = this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0;\n        setTimeout((/**\n         * @return {?}\n         */\n        () => this.removeBackdrop()), duration);\n    }\n    // tslint:disable-next-line:no-any\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    _showModal(content) {\n        /** @type {?} */\n        const modalLoader = this.loaders[this.loaders.length - 1];\n        /** @type {?} */\n        const bsModalRef = new BsModalRef();\n        /** @type {?} */\n        const modalContainerRef = modalLoader\n            .provide({ provide: ModalOptions, useValue: this.config })\n            .provide({ provide: BsModalRef, useValue: bsModalRef })\n            .attach(ModalContainerComponent)\n            .to('body')\n            .show({ content, isAnimated: this.config.animated, initialState: this.config.initialState, bsModalService: this });\n        modalContainerRef.instance.level = this.getModalsCount();\n        bsModalRef.hide = (/**\n         * @return {?}\n         */\n        () => {\n            modalContainerRef.instance.hide();\n        });\n        bsModalRef.content = modalLoader.getInnerComponent() || null;\n        bsModalRef.setClass = (/**\n         * @param {?} newClass\n         * @return {?}\n         */\n        (newClass) => {\n            modalContainerRef.instance.config.class = newClass;\n        });\n        return bsModalRef;\n    }\n    /**\n     * @param {?} level\n     * @return {?}\n     */\n    _hideModal(level) {\n        /** @type {?} */\n        const modalLoader = this.loaders[level - 1];\n        if (modalLoader) {\n            modalLoader.hide();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getModalsCount() {\n        return this.modalsCount;\n    }\n    /**\n     * @param {?} reason\n     * @return {?}\n     */\n    setDismissReason(reason) {\n        this.lastDismissReason = reason;\n    }\n    /**\n     * @return {?}\n     */\n    removeBackdrop() {\n        this._backdropLoader.hide();\n        this.backdropRef = null;\n    }\n    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */\n    /** Scroll bar tricks */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    checkScrollbar() {\n        this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;\n        this.scrollbarWidth = this.getScrollbarWidth();\n    }\n    /**\n     * @return {?}\n     */\n    setScrollbar() {\n        if (!document) {\n            return;\n        }\n        this.originalBodyPadding = parseInt(window\n            .getComputedStyle(document.body)\n            .getPropertyValue('padding-right') || '0', 10);\n        if (this.isBodyOverflowing) {\n            document.body.style.paddingRight = `${this.originalBodyPadding +\n                this.scrollbarWidth}px`;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    resetScrollbar() {\n        document.body.style.paddingRight = `${this.originalBodyPadding}px`;\n    }\n    // thx d.walsh\n    /**\n     * @private\n     * @return {?}\n     */\n    getScrollbarWidth() {\n        /** @type {?} */\n        const scrollDiv = this._renderer.createElement('div');\n        this._renderer.addClass(scrollDiv, CLASS_NAME.SCROLLBAR_MEASURER);\n        this._renderer.appendChild(document.body, scrollDiv);\n        /** @type {?} */\n        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        this._renderer.removeChild(document.body, scrollDiv);\n        return scrollbarWidth;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createLoaders() {\n        /** @type {?} */\n        const loader = this.clf.createLoader(null, null, null);\n        this.copyEvent(loader.onBeforeShow, this.onShow);\n        this.copyEvent(loader.onShown, this.onShown);\n        this.copyEvent(loader.onBeforeHide, this.onHide);\n        this.copyEvent(loader.onHidden, this.onHidden);\n        this.loaders.push(loader);\n    }\n    /**\n     * @private\n     * @param {?} level\n     * @return {?}\n     */\n    removeLoaders(level) {\n        this.loaders.splice(level - 1, 1);\n        this.loaders.forEach((/**\n         * @param {?} loader\n         * @param {?} i\n         * @return {?}\n         */\n        (loader, i) => {\n            loader.instance.level = i + 1;\n        }));\n    }\n    // tslint:disable-next-line:no-any\n    /**\n     * @private\n     * @param {?} from\n     * @param {?} to\n     * @return {?}\n     */\n    copyEvent(from, to) {\n        from.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            to.emit(this.lastDismissReason);\n        }));\n    }\n}\nBsModalService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBsModalService.ctorParameters = () => [\n    { type: RendererFactory2 },\n    { type: ComponentLoaderFactory }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ModalModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return {\n            ngModule: ModalModule,\n            providers: [BsModalService, ComponentLoaderFactory, PositioningService]\n        };\n    }\n}\nModalModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    ModalBackdropComponent,\n                    ModalDirective,\n                    ModalContainerComponent\n                ],\n                exports: [ModalBackdropComponent, ModalDirective],\n                entryComponents: [ModalBackdropComponent, ModalContainerComponent]\n            },] }\n];\n\nexport { BsModalRef, BsModalService, ModalBackdropComponent, ModalBackdropOptions, ModalContainerComponent, ModalDirective, ModalModule, ModalOptions, CLASS_NAME as ɵa };\n"]}