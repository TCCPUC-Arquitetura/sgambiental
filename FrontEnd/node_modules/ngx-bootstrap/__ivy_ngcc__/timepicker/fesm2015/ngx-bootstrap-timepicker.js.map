{"version":3,"sources":["C:/TCC/master/sgambiental/FrontEnd/node_modules/ngx-bootstrap/timepicker/fesm2015/ngx-bootstrap-timepicker.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mHA6DC;;;;;;mEAMkE;;;0BAGjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkdD;;;gDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgHD,4GAGC;;;;;gDAEwC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkUzC,omBAoCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA2BA;;;;;;;;;;;;;;;;;;CAgBD;;;;;;;;;0BAOC","file":"ngx-bootstrap-timepicker.js","sourcesContent":["import { Injectable, forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { MiniStore, MiniState } from 'ngx-bootstrap/mini-ngrx';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TimepickerActions {\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        return {\n            type: TimepickerActions.WRITE_VALUE,\n            payload: value\n        };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    changeHours(event) {\n        return {\n            type: TimepickerActions.CHANGE_HOURS,\n            payload: event\n        };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    changeMinutes(event) {\n        return {\n            type: TimepickerActions.CHANGE_MINUTES,\n            payload: event\n        };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    changeSeconds(event) {\n        return {\n            type: TimepickerActions.CHANGE_SECONDS,\n            payload: event\n        };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setTime(value) {\n        return {\n            type: TimepickerActions.SET_TIME_UNIT,\n            payload: value\n        };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    updateControls(value) {\n        return {\n            type: TimepickerActions.UPDATE_CONTROLS,\n            payload: value\n        };\n    }\n}\nTimepickerActions.WRITE_VALUE = '[timepicker] write value from ng model';\nTimepickerActions.CHANGE_HOURS = '[timepicker] change hours';\nTimepickerActions.CHANGE_MINUTES = '[timepicker] change minutes';\nTimepickerActions.CHANGE_SECONDS = '[timepicker] change seconds';\nTimepickerActions.SET_TIME_UNIT = '[timepicker] set time unit';\nTimepickerActions.UPDATE_CONTROLS = '[timepicker] update controls';\nTimepickerActions.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst dex = 10;\n/** @type {?} */\nconst hoursPerDay = 24;\n/** @type {?} */\nconst hoursPerDayHalf = 12;\n/** @type {?} */\nconst minutesPerHour = 60;\n/** @type {?} */\nconst secondsPerMinute = 60;\n/**\n * @param {?=} value\n * @return {?}\n */\nfunction isValidDate(value) {\n    if (!value) {\n        return false;\n    }\n    if (value instanceof Date && isNaN(value.getHours())) {\n        return false;\n    }\n    if (typeof value === 'string') {\n        return isValidDate(new Date(value));\n    }\n    return true;\n}\n/**\n * @param {?} controls\n * @param {?} newDate\n * @return {?}\n */\nfunction isValidLimit(controls, newDate) {\n    if (controls.min && newDate < controls.min) {\n        return false;\n    }\n    if (controls.max && newDate > controls.max) {\n        return false;\n    }\n    return true;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toNumber(value) {\n    if (typeof value === 'number') {\n        return value;\n    }\n    return parseInt(value, dex);\n}\n/**\n * @param {?} value\n * @param {?=} isPM\n * @return {?}\n */\nfunction parseHours(value, isPM = false) {\n    /** @type {?} */\n    const hour = toNumber(value);\n    if (isNaN(hour) ||\n        hour < 0 ||\n        hour > (isPM ? hoursPerDayHalf : hoursPerDay)) {\n        return NaN;\n    }\n    return hour;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction parseMinutes(value) {\n    /** @type {?} */\n    const minute = toNumber(value);\n    if (isNaN(minute) || minute < 0 || minute > minutesPerHour) {\n        return NaN;\n    }\n    return minute;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction parseSeconds(value) {\n    /** @type {?} */\n    const seconds = toNumber(value);\n    if (isNaN(seconds) || seconds < 0 || seconds > secondsPerMinute) {\n        return NaN;\n    }\n    return seconds;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction parseTime(value) {\n    if (typeof value === 'string') {\n        return new Date(value);\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @param {?} diff\n * @return {?}\n */\nfunction changeTime(value, diff) {\n    if (!value) {\n        return changeTime(createDate(new Date(), 0, 0, 0), diff);\n    }\n    /** @type {?} */\n    let hour = value.getHours();\n    /** @type {?} */\n    let minutes = value.getMinutes();\n    /** @type {?} */\n    let seconds = value.getSeconds();\n    if (diff.hour) {\n        hour = (hour + toNumber(diff.hour)) % hoursPerDay;\n        if (hour < 0) {\n            hour += hoursPerDay;\n        }\n    }\n    if (diff.minute) {\n        minutes = minutes + toNumber(diff.minute);\n    }\n    if (diff.seconds) {\n        seconds = seconds + toNumber(diff.seconds);\n    }\n    return createDate(value, hour, minutes, seconds);\n}\n/**\n * @param {?} value\n * @param {?} opts\n * @return {?}\n */\nfunction setTime(value, opts) {\n    /** @type {?} */\n    let hour = parseHours(opts.hour);\n    /** @type {?} */\n    const minute = parseMinutes(opts.minute);\n    /** @type {?} */\n    const seconds = parseSeconds(opts.seconds) || 0;\n    if (opts.isPM && hour !== 12) {\n        hour += hoursPerDayHalf;\n    }\n    if (!value) {\n        if (!isNaN(hour) && !isNaN(minute)) {\n            return createDate(new Date(), hour, minute, seconds);\n        }\n        return value;\n    }\n    if (isNaN(hour) || isNaN(minute)) {\n        return value;\n    }\n    return createDate(value, hour, minute, seconds);\n}\n/**\n * @param {?} value\n * @param {?} hours\n * @param {?} minutes\n * @param {?} seconds\n * @return {?}\n */\nfunction createDate(value, hours, minutes, seconds) {\n    return new Date(value.getFullYear(), value.getMonth(), value.getDate(), hours, minutes, seconds, value.getMilliseconds());\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction padNumber(value) {\n    /** @type {?} */\n    const _value = value.toString();\n    if (_value.length > 1) {\n        return _value;\n    }\n    return `0${_value}`;\n}\n/**\n * @param {?} hours\n * @param {?} isPM\n * @return {?}\n */\nfunction isHourInputValid(hours, isPM) {\n    return !isNaN(parseHours(hours, isPM));\n}\n/**\n * @param {?} minutes\n * @return {?}\n */\nfunction isMinuteInputValid(minutes) {\n    return !isNaN(parseMinutes(minutes));\n}\n/**\n * @param {?} seconds\n * @return {?}\n */\nfunction isSecondInputValid(seconds) {\n    return !isNaN(parseSeconds(seconds));\n}\n/**\n * @param {?} diff\n * @param {?} max\n * @param {?} min\n * @return {?}\n */\nfunction isInputLimitValid(diff, max, min) {\n    /** @type {?} */\n    const newDate = setTime(new Date(), diff);\n    if (max && newDate > max) {\n        return false;\n    }\n    if (min && newDate < min) {\n        return false;\n    }\n    return true;\n}\n/**\n * @param {?} hours\n * @param {?=} minutes\n * @param {?=} seconds\n * @param {?=} isPM\n * @return {?}\n */\nfunction isInputValid(hours, minutes = '0', seconds = '0', isPM) {\n    return isHourInputValid(hours, isPM)\n        && isMinuteInputValid(minutes)\n        && isSecondInputValid(seconds);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} state\n * @param {?=} event\n * @return {?}\n */\nfunction canChangeValue(state, event) {\n    if (state.readonlyInput || state.disabled) {\n        return false;\n    }\n    if (event) {\n        if (event.source === 'wheel' && !state.mousewheel) {\n            return false;\n        }\n        if (event.source === 'key' && !state.arrowkeys) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\nfunction canChangeHours(event, controls) {\n    if (!event.step) {\n        return false;\n    }\n    if (event.step > 0 && !controls.canIncrementHours) {\n        return false;\n    }\n    if (event.step < 0 && !controls.canDecrementHours) {\n        return false;\n    }\n    return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\nfunction canChangeMinutes(event, controls) {\n    if (!event.step) {\n        return false;\n    }\n    if (event.step > 0 && !controls.canIncrementMinutes) {\n        return false;\n    }\n    if (event.step < 0 && !controls.canDecrementMinutes) {\n        return false;\n    }\n    return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\nfunction canChangeSeconds(event, controls) {\n    if (!event.step) {\n        return false;\n    }\n    if (event.step > 0 && !controls.canIncrementSeconds) {\n        return false;\n    }\n    if (event.step < 0 && !controls.canDecrementSeconds) {\n        return false;\n    }\n    return true;\n}\n/**\n * @param {?} state\n * @return {?}\n */\nfunction getControlsValue(state) {\n    const { hourStep, minuteStep, secondsStep, readonlyInput, disabled, mousewheel, arrowkeys, showSpinners, showMeridian, showSeconds, meridians, min, max } = state;\n    return {\n        hourStep,\n        minuteStep,\n        secondsStep,\n        readonlyInput,\n        disabled,\n        mousewheel,\n        arrowkeys,\n        showSpinners,\n        showMeridian,\n        showSeconds,\n        meridians,\n        min,\n        max\n    };\n}\n/**\n * @param {?} value\n * @param {?} state\n * @return {?}\n */\nfunction timepickerControls(value, state) {\n    /** @type {?} */\n    const hoursPerDayHalf = 12;\n    const { min, max, hourStep, minuteStep, secondsStep, showSeconds } = state;\n    /** @type {?} */\n    const res = {\n        canIncrementHours: true,\n        canIncrementMinutes: true,\n        canIncrementSeconds: true,\n        canDecrementHours: true,\n        canDecrementMinutes: true,\n        canDecrementSeconds: true,\n        canToggleMeridian: true\n    };\n    if (!value) {\n        return res;\n    }\n    // compare dates\n    if (max) {\n        /** @type {?} */\n        const _newHour = changeTime(value, { hour: hourStep });\n        res.canIncrementHours = max > _newHour;\n        if (!res.canIncrementHours) {\n            /** @type {?} */\n            const _newMinutes = changeTime(value, { minute: minuteStep });\n            res.canIncrementMinutes = showSeconds\n                ? max > _newMinutes\n                : max >= _newMinutes;\n        }\n        if (!res.canIncrementMinutes) {\n            /** @type {?} */\n            const _newSeconds = changeTime(value, { seconds: secondsStep });\n            res.canIncrementSeconds = max >= _newSeconds;\n        }\n        if (value.getHours() < hoursPerDayHalf) {\n            res.canToggleMeridian = changeTime(value, { hour: hoursPerDayHalf }) < max;\n        }\n    }\n    if (min) {\n        /** @type {?} */\n        const _newHour = changeTime(value, { hour: -hourStep });\n        res.canDecrementHours = min < _newHour;\n        if (!res.canDecrementHours) {\n            /** @type {?} */\n            const _newMinutes = changeTime(value, { minute: -minuteStep });\n            res.canDecrementMinutes = showSeconds\n                ? min < _newMinutes\n                : min <= _newMinutes;\n        }\n        if (!res.canDecrementMinutes) {\n            /** @type {?} */\n            const _newSeconds = changeTime(value, { seconds: -secondsStep });\n            res.canDecrementSeconds = min <= _newSeconds;\n        }\n        if (value.getHours() >= hoursPerDayHalf) {\n            res.canToggleMeridian = changeTime(value, { hour: -hoursPerDayHalf }) > min;\n        }\n    }\n    return res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides default configuration values for timepicker\n */\nclass TimepickerConfig {\n    constructor() {\n        /**\n         * hours change step\n         */\n        this.hourStep = 1;\n        /**\n         * hours change step\n         */\n        this.minuteStep = 5;\n        /**\n         * seconds changes step\n         */\n        this.secondsStep = 10;\n        /**\n         * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM\n         */\n        this.showMeridian = true;\n        /**\n         * meridian labels based on locale\n         */\n        this.meridians = ['AM', 'PM'];\n        /**\n         * if true hours and minutes fields will be readonly\n         */\n        this.readonlyInput = false;\n        /**\n         * if true hours and minutes fields will be disabled\n         */\n        this.disabled = false;\n        /**\n         * if true scroll inside hours and minutes inputs will change time\n         */\n        this.mousewheel = true;\n        /**\n         * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard\n         */\n        this.arrowkeys = true;\n        /**\n         * if true spinner arrows above and below the inputs will be shown\n         */\n        this.showSpinners = true;\n        /**\n         * show seconds in timepicker\n         */\n        this.showSeconds = false;\n        /**\n         * show minutes in timepicker\n         */\n        this.showMinutes = true;\n        /**\n         * placeholder for hours field in timepicker\n         */\n        this.hoursPlaceholder = 'HH';\n        /**\n         * placeholder for minutes field in timepicker\n         */\n        this.minutesPlaceholder = 'MM';\n        /**\n         * placeholder for seconds field in timepicker\n         */\n        this.secondsPlaceholder = 'SS';\n    }\n}\nTimepickerConfig.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst initialState = {\n    value: null,\n    config: new TimepickerConfig(),\n    controls: {\n        canIncrementHours: true,\n        canIncrementMinutes: true,\n        canIncrementSeconds: true,\n        canDecrementHours: true,\n        canDecrementMinutes: true,\n        canDecrementSeconds: true,\n        canToggleMeridian: true\n    }\n};\n// tslint:disable-next-line:cyclomatic-complexity\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nfunction timepickerReducer(state = initialState, action) {\n    switch (action.type) {\n        case TimepickerActions.WRITE_VALUE: {\n            return Object.assign({}, state, { value: action.payload });\n        }\n        case TimepickerActions.CHANGE_HOURS: {\n            if (!canChangeValue(state.config, action.payload) ||\n                !canChangeHours(action.payload, state.controls)) {\n                return state;\n            }\n            /** @type {?} */\n            const _newTime = changeTime(state.value, { hour: action.payload.step });\n            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n                return state;\n            }\n            return Object.assign({}, state, { value: _newTime });\n        }\n        case TimepickerActions.CHANGE_MINUTES: {\n            if (!canChangeValue(state.config, action.payload) ||\n                !canChangeMinutes(action.payload, state.controls)) {\n                return state;\n            }\n            /** @type {?} */\n            const _newTime = changeTime(state.value, { minute: action.payload.step });\n            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n                return state;\n            }\n            return Object.assign({}, state, { value: _newTime });\n        }\n        case TimepickerActions.CHANGE_SECONDS: {\n            if (!canChangeValue(state.config, action.payload) ||\n                !canChangeSeconds(action.payload, state.controls)) {\n                return state;\n            }\n            /** @type {?} */\n            const _newTime = changeTime(state.value, {\n                seconds: action.payload.step\n            });\n            if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n                return state;\n            }\n            return Object.assign({}, state, { value: _newTime });\n        }\n        case TimepickerActions.SET_TIME_UNIT: {\n            if (!canChangeValue(state.config)) {\n                return state;\n            }\n            /** @type {?} */\n            const _newTime = setTime(state.value, action.payload);\n            return Object.assign({}, state, { value: _newTime });\n        }\n        case TimepickerActions.UPDATE_CONTROLS: {\n            /** @type {?} */\n            const _newControlsState = timepickerControls(state.value, action.payload);\n            /** @type {?} */\n            const _newState = {\n                value: state.value,\n                config: action.payload,\n                controls: _newControlsState\n            };\n            if (state.config.showMeridian !== _newState.config.showMeridian) {\n                if (state.value) {\n                    _newState.value = new Date(state.value);\n                }\n            }\n            return Object.assign({}, state, _newState);\n        }\n        default:\n            return state;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TimepickerStore extends MiniStore {\n    constructor() {\n        /** @type {?} */\n        const _dispatcher = new BehaviorSubject({\n            type: '[mini-ngrx] dispatcher init'\n        });\n        /** @type {?} */\n        const state = new MiniState(initialState, _dispatcher, timepickerReducer);\n        super(_dispatcher, timepickerReducer, state);\n    }\n}\nTimepickerStore.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTimepickerStore.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst TIMEPICKER_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => TimepickerComponent)),\n    multi: true\n};\nclass TimepickerComponent {\n    /**\n     * @param {?} _config\n     * @param {?} _cd\n     * @param {?} _store\n     * @param {?} _timepickerActions\n     */\n    constructor(_config, _cd, _store, _timepickerActions) {\n        this._cd = _cd;\n        this._store = _store;\n        this._timepickerActions = _timepickerActions;\n        /**\n         * emits true if value is a valid date\n         */\n        this.isValid = new EventEmitter();\n        // min\\max validation for input fields\n        this.invalidHours = false;\n        this.invalidMinutes = false;\n        this.invalidSeconds = false;\n        // control value accessor methods\n        // tslint:disable-next-line:no-any\n        this.onChange = Function.prototype;\n        // tslint:disable-next-line:no-any\n        this.onTouched = Function.prototype;\n        Object.assign(this, _config);\n        this.timepickerSub = _store\n            .select((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state.value))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => {\n            // update UI values if date changed\n            this._renderTime(value);\n            this.onChange(value);\n            this._store.dispatch(this._timepickerActions.updateControls(getControlsValue(this)));\n        }));\n        _store\n            .select((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state.controls))\n            .subscribe((/**\n         * @param {?} controlsState\n         * @return {?}\n         */\n        (controlsState) => {\n            this.isValid.emit(isInputValid(this.hours, this.minutes, this.seconds, this.isPM()));\n            Object.assign(this, controlsState);\n            _cd.markForCheck();\n        }));\n    }\n    /**\n     * @deprecated - please use `isEditable` instead\n     * @return {?}\n     */\n    get isSpinnersVisible() {\n        return this.showSpinners && !this.readonlyInput;\n    }\n    /**\n     * @return {?}\n     */\n    get isEditable() {\n        return !(this.readonlyInput || this.disabled);\n    }\n    /**\n     * @return {?}\n     */\n    resetValidation() {\n        this.invalidHours = false;\n        this.invalidMinutes = false;\n        this.invalidSeconds = false;\n    }\n    /**\n     * @return {?}\n     */\n    isPM() {\n        return this.showMeridian && this.meridian === this.meridians[1];\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    prevDef($event) {\n        $event.preventDefault();\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    wheelSign($event) {\n        return Math.sign($event.deltaY) * -1;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._store.dispatch(this._timepickerActions.updateControls(getControlsValue(this)));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n    changeHours(step, source = '') {\n        this.resetValidation();\n        this._store.dispatch(this._timepickerActions.changeHours({ step, source }));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n    changeMinutes(step, source = '') {\n        this.resetValidation();\n        this._store.dispatch(this._timepickerActions.changeMinutes({ step, source }));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n    changeSeconds(step, source = '') {\n        this.resetValidation();\n        this._store.dispatch(this._timepickerActions.changeSeconds({ step, source }));\n    }\n    /**\n     * @param {?} hours\n     * @return {?}\n     */\n    updateHours(hours) {\n        this.resetValidation();\n        this.hours = hours;\n        /** @type {?} */\n        const isValid = isHourInputValid(this.hours, this.isPM()) && this.isValidLimit();\n        if (!isValid) {\n            this.invalidHours = true;\n            this.isValid.emit(false);\n            this.onChange(null);\n            return;\n        }\n        this._updateTime();\n    }\n    /**\n     * @param {?} minutes\n     * @return {?}\n     */\n    updateMinutes(minutes) {\n        this.resetValidation();\n        this.minutes = minutes;\n        /** @type {?} */\n        const isValid = isMinuteInputValid(this.minutes) && this.isValidLimit();\n        if (!isValid) {\n            this.invalidMinutes = true;\n            this.isValid.emit(false);\n            this.onChange(null);\n            return;\n        }\n        this._updateTime();\n    }\n    /**\n     * @param {?} seconds\n     * @return {?}\n     */\n    updateSeconds(seconds) {\n        this.resetValidation();\n        this.seconds = seconds;\n        /** @type {?} */\n        const isValid = isSecondInputValid(this.seconds) && this.isValidLimit();\n        if (!isValid) {\n            this.invalidSeconds = true;\n            this.isValid.emit(false);\n            this.onChange(null);\n            return;\n        }\n        this._updateTime();\n    }\n    /**\n     * @return {?}\n     */\n    isValidLimit() {\n        return isInputLimitValid({\n            hour: this.hours,\n            minute: this.minutes,\n            seconds: this.seconds,\n            isPM: this.isPM()\n        }, this.max, this.min);\n    }\n    /**\n     * @return {?}\n     */\n    _updateTime() {\n        /** @type {?} */\n        const _seconds = this.showSeconds ? this.seconds : void 0;\n        /** @type {?} */\n        const _minutes = this.showMinutes ? this.minutes : void 0;\n        if (!isInputValid(this.hours, _minutes, _seconds, this.isPM())) {\n            this.isValid.emit(false);\n            this.onChange(null);\n            return;\n        }\n        this._store.dispatch(this._timepickerActions.setTime({\n            hour: this.hours,\n            minute: this.minutes,\n            seconds: this.seconds,\n            isPM: this.isPM()\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    toggleMeridian() {\n        if (!this.showMeridian || !this.isEditable) {\n            return;\n        }\n        /** @type {?} */\n        const _hoursPerDayHalf = 12;\n        this._store.dispatch(this._timepickerActions.changeHours({\n            step: _hoursPerDayHalf,\n            source: ''\n        }));\n    }\n    /**\n     * Write a new value to the element.\n     * @param {?} obj\n     * @return {?}\n     */\n    writeValue(obj) {\n        if (isValidDate(obj)) {\n            this._store.dispatch(this._timepickerActions.writeValue(parseTime(obj)));\n        }\n        else if (obj == null) {\n            this._store.dispatch(this._timepickerActions.writeValue(null));\n        }\n    }\n    /**\n     * Set the function to be called when the control receives a change event.\n     * @param {?} fn\n     * @return {?}\n     */\n    // tslint:disable-next-line:no-any\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Set the function to be called when the control receives a touch event.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * This function is called when the control status changes to or from \"disabled\".\n     * Depending on the value, it will enable or disable the appropriate DOM element.\n     *\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.timepickerSub.unsubscribe();\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _renderTime(value) {\n        if (!isValidDate(value)) {\n            this.hours = '';\n            this.minutes = '';\n            this.seconds = '';\n            this.meridian = this.meridians[0];\n            return;\n        }\n        /** @type {?} */\n        const _value = parseTime(value);\n        /** @type {?} */\n        const _hoursPerDayHalf = 12;\n        /** @type {?} */\n        let _hours = _value.getHours();\n        if (this.showMeridian) {\n            this.meridian = this.meridians[_hours >= _hoursPerDayHalf ? 1 : 0];\n            _hours = _hours % _hoursPerDayHalf;\n            // should be 12 PM, not 00 PM\n            if (_hours === 0) {\n                _hours = _hoursPerDayHalf;\n            }\n        }\n        this.hours = padNumber(_hours);\n        this.minutes = padNumber(_value.getMinutes());\n        this.seconds = padNumber(_value.getUTCSeconds());\n    }\n}\nTimepickerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'timepicker',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [TIMEPICKER_CONTROL_VALUE_ACCESSOR, TimepickerStore],\n                template: \"<table>\\n  <tbody>\\n  <tr class=\\\"text-center\\\" [hidden]=\\\"!showSpinners\\\">\\n    <!-- increment hours button-->\\n    <td>\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementHours || !isEditable\\\"\\n         (click)=\\\"changeHours(hourStep)\\\"\\n      ><span class=\\\"bs-chevron bs-chevron-up\\\"></span></a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- increment minutes button -->\\n    <td *ngIf=\\\"showMinutes\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementMinutes || !isEditable\\\"\\n         (click)=\\\"changeMinutes(minuteStep)\\\"\\n      ><span class=\\\"bs-chevron bs-chevron-up\\\"></span></a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;</td>\\n    <!-- increment seconds button -->\\n    <td *ngIf=\\\"showSeconds\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canIncrementSeconds || !isEditable\\\"\\n         (click)=\\\"changeSeconds(secondsStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-up\\\"></span>\\n      </a>\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian placeholder-->\\n    <td *ngIf=\\\"showMeridian\\\"></td>\\n  </tr>\\n  <tr>\\n    <!-- hours -->\\n    <td class=\\\"form-group\\\" [class.has-error]=\\\"invalidHours\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidHours\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             [placeholder]=\\\"hoursPlaceholder\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"hours\\\"\\n             (wheel)=\\\"prevDef($event);changeHours(hourStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeHours(hourStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeHours(-hourStep, 'key')\\\"\\n             (change)=\\\"updateHours($event.target.value)\\\"></td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;:&nbsp;</td>\\n    <!-- minutes -->\\n    <td class=\\\"form-group\\\" *ngIf=\\\"showMinutes\\\" [class.has-error]=\\\"invalidMinutes\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidMinutes\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             [placeholder]=\\\"minutesPlaceholder\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"minutes\\\"\\n             (wheel)=\\\"prevDef($event);changeMinutes(minuteStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeMinutes(minuteStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeMinutes(-minuteStep, 'key')\\\"\\n             (change)=\\\"updateMinutes($event.target.value)\\\">\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;:&nbsp;</td>\\n    <!-- seconds -->\\n    <td class=\\\"form-group\\\" *ngIf=\\\"showSeconds\\\" [class.has-error]=\\\"invalidSeconds\\\">\\n      <input type=\\\"text\\\" [class.is-invalid]=\\\"invalidSeconds\\\"\\n             class=\\\"form-control text-center bs-timepicker-field\\\"\\n             [placeholder]=\\\"secondsPlaceholder\\\"\\n             maxlength=\\\"2\\\"\\n             [readonly]=\\\"readonlyInput\\\"\\n             [disabled]=\\\"disabled\\\"\\n             [value]=\\\"seconds\\\"\\n             (wheel)=\\\"prevDef($event);changeSeconds(secondsStep * wheelSign($event), 'wheel')\\\"\\n             (keydown.ArrowUp)=\\\"changeSeconds(secondsStep, 'key')\\\"\\n             (keydown.ArrowDown)=\\\"changeSeconds(-secondsStep, 'key')\\\"\\n             (change)=\\\"updateSeconds($event.target.value)\\\">\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian -->\\n    <td *ngIf=\\\"showMeridian\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-default text-center\\\"\\n              [disabled]=\\\"!isEditable || !canToggleMeridian\\\"\\n              [class.disabled]=\\\"!isEditable || !canToggleMeridian\\\"\\n              (click)=\\\"toggleMeridian()\\\"\\n      >{{ meridian }}\\n      </button>\\n    </td>\\n  </tr>\\n  <tr class=\\\"text-center\\\" [hidden]=\\\"!showSpinners\\\">\\n    <!-- decrement hours button-->\\n    <td>\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementHours || !isEditable\\\"\\n         (click)=\\\"changeHours(-hourStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showMinutes\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- decrement minutes button-->\\n    <td *ngIf=\\\"showMinutes\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementMinutes || !isEditable\\\"\\n         (click)=\\\"changeMinutes(-minuteStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- divider -->\\n    <td *ngIf=\\\"showSeconds\\\">&nbsp;</td>\\n    <!-- decrement seconds button-->\\n    <td *ngIf=\\\"showSeconds\\\">\\n      <a class=\\\"btn btn-link\\\" [class.disabled]=\\\"!canDecrementSeconds || !isEditable\\\"\\n         (click)=\\\"changeSeconds(-secondsStep)\\\">\\n        <span class=\\\"bs-chevron bs-chevron-down\\\"></span>\\n      </a>\\n    </td>\\n    <!-- space between -->\\n    <td *ngIf=\\\"showMeridian\\\">&nbsp;&nbsp;&nbsp;</td>\\n    <!-- meridian placeholder-->\\n    <td *ngIf=\\\"showMeridian\\\"></td>\\n  </tr>\\n  </tbody>\\n</table>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                styles: [`\n    .bs-chevron {\n      border-style: solid;\n      display: block;\n      width: 9px;\n      height: 9px;\n      position: relative;\n      border-width: 3px 0px 0 3px;\n    }\n\n    .bs-chevron-up {\n      -webkit-transform: rotate(45deg);\n      transform: rotate(45deg);\n      top: 2px;\n    }\n\n    .bs-chevron-down {\n      -webkit-transform: rotate(-135deg);\n      transform: rotate(-135deg);\n      top: -2px;\n    }\n\n    .bs-timepicker-field {\n      width: 50px;\n      padding: .375rem .55rem;\n    }\n  `]\n            }] }\n];\n/** @nocollapse */\nTimepickerComponent.ctorParameters = () => [\n    { type: TimepickerConfig },\n    { type: ChangeDetectorRef },\n    { type: TimepickerStore },\n    { type: TimepickerActions }\n];\nTimepickerComponent.propDecorators = {\n    hourStep: [{ type: Input }],\n    minuteStep: [{ type: Input }],\n    secondsStep: [{ type: Input }],\n    readonlyInput: [{ type: Input }],\n    disabled: [{ type: Input }],\n    mousewheel: [{ type: Input }],\n    arrowkeys: [{ type: Input }],\n    showSpinners: [{ type: Input }],\n    showMeridian: [{ type: Input }],\n    showMinutes: [{ type: Input }],\n    showSeconds: [{ type: Input }],\n    meridians: [{ type: Input }],\n    min: [{ type: Input }],\n    max: [{ type: Input }],\n    hoursPlaceholder: [{ type: Input }],\n    minutesPlaceholder: [{ type: Input }],\n    secondsPlaceholder: [{ type: Input }],\n    isValid: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TimepickerModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return {\n            ngModule: TimepickerModule,\n            providers: [TimepickerConfig, TimepickerActions, TimepickerStore]\n        };\n    }\n}\nTimepickerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [TimepickerComponent],\n                exports: [TimepickerComponent]\n            },] }\n];\n\nexport { TimepickerActions, TimepickerComponent, TimepickerConfig, TimepickerModule, TimepickerStore, TIMEPICKER_CONTROL_VALUE_ACCESSOR as ɵa };\n"]}