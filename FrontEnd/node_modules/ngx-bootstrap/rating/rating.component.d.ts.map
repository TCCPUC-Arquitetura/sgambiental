{"version":3,"file":"rating.component.d.ts","sources":["C:/TCC/master/sgambiental/FrontEnd/node_modules/ngx-bootstrap/rating/rating.component.d.ts"],"sourcesContent":["import { EventEmitter, OnInit, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { AccessorContent, RatingResults } from './models';\nexport declare const RATING_CONTROL_VALUE_ACCESSOR: AccessorContent;\nexport declare class RatingComponent implements ControlValueAccessor, OnInit {\n    private changeDetection;\n    /** number of icons */\n    max: number;\n    /** if true will not react on any user events */\n    readonly: boolean;\n    /** array of icons titles, default: ([\"one\", \"two\", \"three\", \"four\", \"five\"]) */\n    titles: string[];\n    /** custom template for icons */\n    customTemplate: TemplateRef<any>;\n    /** fired when icon selected, $event:number equals to selected rating */\n    onHover: EventEmitter<number>;\n    /** fired when icon selected, $event:number equals to previous rating value */\n    onLeave: EventEmitter<number>;\n    onChange: any;\n    onTouched: any;\n    range: RatingResults[];\n    value: number;\n    protected preValue: number;\n    constructor(changeDetection: ChangeDetectorRef);\n    onKeydown(event: KeyboardEvent): void;\n    ngOnInit(): void;\n    writeValue(value: number): void;\n    enter(value: number): void;\n    reset(): void;\n    registerOnChange(fn: (_: number) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    rate(value: number): void;\n    protected buildTemplateObjects(max: number): RatingResults[];\n}\n"],"names":[],"mappings":"AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;"}