{"version":3,"file":"typeahead-container.component.d.ts","sources":["C:/TCC/master/sgambiental/FrontEnd/node_modules/ngx-bootstrap/typeahead/typeahead-container.component.d.ts"],"sourcesContent":["import { ElementRef, Renderer2, TemplateRef } from '@angular/core';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { TypeaheadMatch } from './typeahead-match.class';\nimport { TypeaheadDirective } from './typeahead.directive';\nexport declare class TypeaheadContainerComponent {\n    private positionService;\n    private renderer;\n    element: ElementRef;\n    parent: TypeaheadDirective;\n    query: string[] | string;\n    isFocused: boolean;\n    top: string;\n    left: string;\n    display: string;\n    placement: string;\n    dropup: boolean;\n    guiHeight: string;\n    needScrollbar: boolean;\n    animationState: string;\n    visibility: string;\n    height: number;\n    readonly isBs4: boolean;\n    protected _active: TypeaheadMatch;\n    protected _matches: TypeaheadMatch[];\n    private ulElement;\n    private liElements;\n    constructor(positionService: PositioningService, renderer: Renderer2, element: ElementRef);\n    readonly active: TypeaheadMatch;\n    matches: TypeaheadMatch[];\n    readonly isTopPosition: boolean;\n    readonly optionsListTemplate: TemplateRef<any>;\n    readonly isAnimated: boolean;\n    readonly adaptivePosition: boolean;\n    readonly typeaheadScrollable: boolean;\n    readonly typeaheadOptionsInScrollableView: number;\n    readonly typeaheadIsFirstItemActive: boolean;\n    readonly itemTemplate: TemplateRef<any>;\n    selectActiveMatch(isActiveItemChanged?: boolean): void;\n    prevActiveMatch(): void;\n    nextActiveMatch(): void;\n    selectActive(value: TypeaheadMatch): void;\n    highlight(match: TypeaheadMatch, query: string[] | string): string;\n    focusLost(): void;\n    isActive(value: TypeaheadMatch): boolean;\n    selectMatch(value: TypeaheadMatch, e?: Event): boolean;\n    setScrollableMode(): void;\n    scrollPrevious(index: number): void;\n    scrollNext(index: number): void;\n    private isScrolledIntoView;\n    private scrollToBottom;\n    private scrollToTop;\n}\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;"}